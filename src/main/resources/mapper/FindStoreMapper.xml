<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- StoreMapper.xml -->
<mapper namespace="com.nnzz.nnzz.repository.FindStoreMapper">

    <!-- 1단계: 반경 750m 안의 store_id 가져오기 -->
    <select id="get750NearbyStoreIds" resultType="String">
        <![CDATA[
        SELECT store_id
        FROM store
        WHERE ST_DistanceSphere(location, ST_GeomFromText(CONCAT('POINT(', #{currentLong}, ' ', #{currentLat}, ')'), 4326)) <= 750
        ]]>
    </select>

    <!-- 1단계: 반경 500m 안의 store_id 가져오기 -->
    <select id="get500NearbyStoreIds" resultType="String">
        <![CDATA[
        SELECT store_id
        FROM store
        WHERE ST_DistanceSphere(location, ST_GeomFromText(CONCAT('POINT(', #{currentLong}, ' ', #{currentLat}, ')'), 4326)) <= 750
        ]]>
    </select>

    <!-- 1단계: 반경 250m 안의 store_id 가져오기 -->
    <select id="get250NearbyStoreIds" resultType="String">
        <![CDATA[
        SELECT store_id
        FROM store
        WHERE ST_DistanceSphere(location, ST_GeomFromText(CONCAT('POINT(', #{currentLong}, ' ', #{currentLat}, ')'), 4326)) <= 750
        ]]>
    </select>

    <!-- 2단계: business_hours에서 조건에 맞는 점심 가능 store_id 가져오기 -->
    <select id="getLunchValidStoreIds" resultType="String">
        <![CDATA[
        SELECT DISTINCT bh.store_id
        FROM business_hours bh
        WHERE bh.${currentDay} NOT LIKE '%휴무%'
        ]]>
        <if test="storeIds != null and storeIds.size() > 0">
            <![CDATA[
            AND bh.store_id IN
            ]]>
            <foreach item="storeId" collection="storeIds" open="(" separator="," close=")">
                #{storeId}
            </foreach>
        </if>
        <![CDATA[
          AND EXISTS(
        SELECT 1
        FROM business_hours bh2
        WHERE bh2.store_id = bh.store_id
        AND (
          (bh2.business_type = 'O0001' AND
           (bh2.${currentDay} IS NOT NULL AND
            bh2.${currentDay} NOT IN ('휴무', '정기휴무', '') AND
            (bh2.${currentDay}::text NOT LIKE '%휴무%' AND TO_CHAR(bh2.${currentDay}::time, 'HH24:MI') <= '12:00')))
         OR (bh2.business_type = 'C0001' AND
             (bh2.${currentDay} IS NOT NULL AND
              bh2.${currentDay} NOT IN ('휴무', '정기휴무', '') AND
              (bh2.${currentDay}::text NOT LIKE '%휴무%' AND TO_CHAR(bh2.${currentDay}::time, 'HH24:MI') >= '12:00')))
          )
        )
        ]]>
    </select>

    <!-- 2단계: business_hours에서 조건에 맞는 저녁 가능 store_id 가져오기 -->
    <select id="getDinnerValidStoreIds" resultType="String">
        <![CDATA[
        SELECT DISTINCT bh.store_id
        FROM business_hours bh
        WHERE bh.${currentDay} NOT LIKE '%휴무%'
        ]]>
        <if test="storeIds != null and storeIds.size() > 0">
            AND bh.store_id IN
            <foreach item="storeId" collection="storeIds" open="(" separator="," close=")">
                #{storeId}
            </foreach>
        </if>
        <![CDATA[
        AND EXISTS (
            SELECT 1
            FROM business_hours bh2
            WHERE bh2.store_id = bh.store_id
            AND bh2.business_type = 'O0001'
            AND bh2.${currentDay} IS NOT NULL
            AND bh2.${currentDay} NOT IN ('휴무', '정기휴무', '')
            AND bh2.${currentDay}::text NOT LIKE '%휴무%'
            AND TO_CHAR(bh2.${currentDay}::time, 'HH24:MI') <= '18:00'
        )
        AND EXISTS (
            SELECT 1
            FROM business_hours bh3, business_hours bh4
            WHERE bh3.store_id = bh.store_id
            AND bh4.store_id = bh.store_id
            AND bh3.business_type = 'C0001'
            AND bh4.business_type = 'O0001'
            AND bh3.${currentDay} IS NOT NULL
            AND bh3.${currentDay} NOT IN ('휴무', '정기휴무', '')
            AND bh3.${currentDay}::text NOT LIKE '%휴무%'
            AND bh4.${currentDay} IS NOT NULL
            AND bh4.${currentDay} NOT IN ('휴무', '정기휴무', '')
            AND bh4.${currentDay}::text NOT LIKE '%휴무%'
            AND (
                (TO_CHAR(bh4.${currentDay}::time, 'HH24:MI') <= TO_CHAR(bh3.${currentDay}::time, 'HH24:MI')
                AND TO_CHAR(bh3.${currentDay}::time, 'HH24:MI') >= '18:00')
                OR
                (TO_CHAR(bh4.${currentDay}::time, 'HH24:MI') > TO_CHAR(bh3.${currentDay}::time, 'HH24:MI')
                AND TO_CHAR(bh3.${currentDay}::time, 'HH24:MI') < '18:00')
            )
        )
        ]]>
    </select>



    <!-- 3단계: 최종적으로 category 가져오기 -->
    <select id="getCategories" resultType="CategoryDTO">
        <![CDATA[
        SELECT
            ft.type1 AS category,
            ft.represent_menu AS represent,
            FLOOR(MIN(ST_DistanceSphere(location, ST_GeomFromText(CONCAT('POINT(', #{currentLong}, ' ', #{currentLat}, ')'), 4326)))) AS distance
        FROM food_type ft
        JOIN (
            SELECT DISTINCT s.category, s.location
            FROM store s
            WHERE s.store_id IN
        ]]>
            <foreach item="storeId" collection="storeIds" open="(" separator="," close=")">
                #{storeId}
            </foreach>
        ) AS categories ON ft.type2 = categories.category
        GROUP BY ft.type1, ft.represent_menu
    </select>


    <!--750미터 이내의 유저가 선택한 카테고리의 가게id 불러오기-->
    <select id="getStores750NearbyAndByCategory" resultType="String">
        <![CDATA[
        SELECT s.store_id
        FROM store s
        JOIN food_type f ON s.category = f.type2
        WHERE ST_DistanceSphere(location, ST_GeomFromText(CONCAT('POINT(', #{currentLong}, ' ', #{currentLat}, ')'), 4326)) <= 750
        AND f.type1 IN
        ]]>
        <foreach item="category" collection="categories" open="(" separator="," close=")">
            #{category}
        </foreach>
    </select>

    <!--500미터 이내의 유저가 선택한 카테고리의 가게id 불러오기-->
    <select id="getStores500NearbyAndByCategory" resultType="String">
        <![CDATA[
        SELECT s.store_id
        FROM store s
        JOIN food_type f ON s.category = f.type2
        WHERE ST_DistanceSphere(location, ST_GeomFromText(CONCAT('POINT(', #{currentLong}, ' ', #{currentLat}, ')'), 4326)) <= 500
        AND f.type1 IN
        ]]>
        <foreach item="category" collection="categories" open="(" separator="," close=")">
            #{category}
        </foreach>
    </select>

    <!--250미터 이내의 유저가 선택한 카테고리의 가게id 불러오기-->
    <select id="getStores250NearbyAndByCategory" resultType="String">
        <![CDATA[
        SELECT s.store_id
        FROM store s
        JOIN food_type f ON s.category = f.type2
        WHERE ST_DistanceSphere(location, ST_GeomFromText(CONCAT('POINT(', #{currentLong}, ' ', #{currentLat}, ')'), 4326)) <= 250
        AND f.type1 IN
        ]]>
        <foreach item="category" collection="categories" open="(" separator="," close=")">
            #{category}
        </foreach>
    </select>


    <resultMap id="storeResultMap" type="StoreDTO">
        <result property="storeId" column="store_id"/>
        <result property="name" column="name"/>
        <result property="address" column="address"/>
        <result property="distance" column="distance"/>
    </resultMap>

    <select id="getFinalStores" resultMap="storeResultMap">
        SELECT
        s.store_id,
        s.name,
        s.address,
        ST_DistanceSphere(s.location, ST_GeomFromText(CONCAT('POINT(', #{currentLong}, ' ', #{currentLat}, ')'), 4326)) AS distance
        FROM store s
        WHERE s.store_id IN
        <foreach item="storeId" collection="storeIds" open="(" separator="," close=")">
            #{storeId}
        </foreach>
        ORDER BY distance
    </select>

    <resultMap id="menuResultMap" type="MenuDTO">
        <result property="menuName" column="menu_name"/>
        <result property="description" column="description"/>
        <result property="price" column="price"/>
    </resultMap>

    <select id="getMenuInfo" resultMap="menuResultMap">
        <![CDATA[
        SELECT
            m.menu_name,
            m.description,
            m.price
        FROM menu m
        WHERE m.store_id = #{storeId}
          AND (
            (SELECT COUNT(*) FROM menu WHERE store_id = #{storeId} AND represent = 'Y') >= 3 AND m.represent = 'Y'
                OR (SELECT COUNT(*) FROM menu WHERE store_id = #{storeId} AND represent = 'Y') < 3
            )
        ORDER BY m.menu_id
            LIMIT 3
        ]]>
    </select>

    <resultMap id="broadcastResultMap" type="BroadcastDTO">
        <result property="broadcastName" column="broadcast_name"/>
        <result property="episode" column="episode"/>
        <result property="broadcastDate" column="broadcast_date"/>
        <result property="topic" column="topic"/>
    </resultMap>

    <select id="getBroadcastInfo" resultMap="broadcastResultMap">
        SELECT b.broadcast_name, b.episode, b.broadcast_date, b.topic
        FROM broadcast b
        WHERE b.store_id = #{storeId}
    </select>

    <select id="getCategory" resultType="String">
        SELECT f.type1
        FROM food_type f
            JOIN store s ON s.category = f.type2
        WHERE s.store_id = #{storeId}
    </select>

    <!--전체조회쿼리-->
    <resultMap id="finalStoreResultMap" type="StoreDTO">
        <result property="storeId" column="store_id"/>
        <result property="name" column="name"/>
        <result property="address" column="address"/>
        <result property="distance" column="distance"/>
        <result property="category" column="category"/>
        <result property="menus" column="menus" typeHandler="com.nnzz.nnzz.config.handler.JsonbTypeHandler" />
        <result property="broadcasts" column="broadcasts" typeHandler="com.nnzz.nnzz.config.handler.JsonbTypeHandler" />
    </resultMap>
    <select id="getFinalStoresDetail" resultMap="finalStoreResultMap">
        <![CDATA[
        WITH menu_counts AS (
            SELECT store_id, COUNT(*) AS cnt
            FROM menu
            WHERE represent = 'Y'
            GROUP BY store_id
        ),
        menu_data AS (
            SELECT
                m.store_id,
                m.menu_name,
                m.description,
                m.price,
                ROW_NUMBER() OVER (PARTITION BY m.store_id ORDER BY m.represent DESC, m.menu_id) AS rn
            FROM menu m
        )
        SELECT
            s.store_id,
            s.name,
            s.address,
            ST_DistanceSphere(s.location, ST_GeomFromText(CONCAT('POINT(', #{currentLong}, ' ', #{currentLat}, ')'), 4326)) AS original_distance,
            FLOOR(ST_DistanceSphere(s.location, ST_GeomFromText(CONCAT('POINT(', #{currentLong}, ' ', #{currentLat}, ')'), 4326))) AS distance,
            f.type1 AS category,
        CASE
            WHEN mc.cnt >= 3 THEN
                COALESCE(jsonb_agg(
                    jsonb_build_object(
                        'menu_name', md.menu_name,
                        'description', md.description,
                        'price', md.price
                    )
                ) FILTER (WHERE md.rn <= 3), '[]'::jsonb)
            ELSE
                COALESCE(jsonb_agg(
                    jsonb_build_object(
                        'menu_name', md.menu_name,
                        'description', md.description,
                        'price', md.price
                    )
                ) FILTER (WHERE md.rn <= 3), '[]'::jsonb)
        END AS menus,
        COALESCE(b.broadcasts, '[]'::jsonb) AS broadcasts
        FROM
            store s
        LEFT JOIN
            (SELECT st.store_id, f.type1
             FROM store st
             JOIN food_type f ON st.category = f.type2
             WHERE st.store_id IN
        ]]>
        <foreach item="storeId" collection="storeIds" open="(" separator="," close=")">
            #{storeId}
        </foreach>
        <![CDATA[
             ) f ON s.store_id = f.store_id
        LEFT JOIN
            menu_counts mc ON s.store_id = mc.store_id
        LEFT JOIN
            menu_data md ON s.store_id = md.store_id
        LEFT JOIN
            (SELECT b.store_id, jsonb_agg(b) AS broadcasts
            FROM broadcast b
            GROUP BY b.store_id) b ON s.store_id = b.store_id
        WHERE
            s.store_id in
        ]]>
        <foreach item="storeId" collection="storeIds" open="(" separator="," close=")">
            #{storeId}
        </foreach>
        <![CDATA[
    GROUP BY
        s.store_id, s.name, s.address, s.location, f.type1, mc.cnt, b.broadcasts
    ORDER BY
        original_distance
        ]]>
    </select>

    <!--가게 하나 조회 쿼리-->
    <resultMap id="oneStoreResultMap" type="StoreDTO">
        <result property="storeId" column="store_id"/>
        <result property="name" column="name"/>
        <result property="address" column="address"/>
        <result property="distance" column="distance"/>
        <result property="category" column="category"/>
        <result property="menus" column="menus" typeHandler="com.nnzz.nnzz.config.handler.JsonbTypeHandler" />
        <result property="broadcasts" column="broadcasts" typeHandler="com.nnzz.nnzz.config.handler.JsonbTypeHandler" />
    </resultMap>
    <select id="getOneStoreDetail" resultMap="oneStoreResultMap">
        <![CDATA[
        WITH menu_counts AS (
            SELECT store_id, COUNT(*) AS cnt
            FROM menu
            WHERE represent = 'Y'
            GROUP BY store_id
        ),
             menu_data AS (
                 SELECT
                     m.store_id,
                     m.menu_name,
                     m.description,
                     m.price,
                     ROW_NUMBER() OVER (PARTITION BY m.store_id ORDER BY m.represent DESC, m.menu_id) AS rn
                 FROM menu m
             )
        SELECT
            s.store_id,
            s.name,
            s.address,
            FLOOR(ST_DistanceSphere(s.location, ST_GeomFromText(CONCAT('POINT(', #{currentLong}, ' ', #{currentLat}, ')'), 4326))) AS distance,
            f.type1 AS category,
            CASE
                WHEN mc.cnt >= 3 THEN
                    COALESCE(jsonb_agg(
                                     jsonb_build_object(
                                             'menu_name', md.menu_name,
                                             'description', md.description,
                                             'price', md.price
                                     )
                             ) FILTER (WHERE md.rn <= 3), '[]'::jsonb)
                ELSE
                    COALESCE(jsonb_agg(
                                     jsonb_build_object(
                                             'menu_name', md.menu_name,
                                             'description', md.description,
                                             'price', md.price
                                     )
                             ) FILTER (WHERE md.rn <= 3), '[]'::jsonb)
                END AS menus,
            COALESCE(b.broadcasts, '[]'::jsonb) AS broadcasts
        FROM
            store s
                LEFT JOIN
            (SELECT st.store_id, f.type1
             FROM store st
                      JOIN food_type f ON st.category = f.type2
             WHERE st.store_id = #{storeId}) f ON s.store_id = f.store_id
                LEFT JOIN
            menu_counts mc ON s.store_id = mc.store_id
                LEFT JOIN
            menu_data md ON s.store_id = md.store_id
                LEFT JOIN
            (SELECT b.store_id, jsonb_agg(b) AS broadcasts
             FROM broadcast b
             GROUP BY b.store_id) b ON s.store_id = b.store_id
        WHERE
            s.store_id = #{storeId}
        GROUP BY
            s.store_id, s.name, s.address, s.location, f.type1, mc.cnt, b.broadcasts
        ]]>
    </select>
</mapper>
